Assignment name: cpp_module_01
Expected files: Warlock.cpp, Warlock.hpp
                ASpell.hpp, ASpell.cpp
                ATarget.hpp, ATarget.cpp
                Fwoosh.hpp, Fwoosh.cpp
                Dummy.hpp, Dummy.cpp

Note: Use of switch is strictly forbidden (grade: -42 if used).

Create abstract class ASpell in canonical form.
Protected attributes:
- name (string)
- effects (string)

Getters:
- std::string getName() const;
- std::string getEffects() const;

Pure virtual method:
- virtual ASpell* clone() const = 0;

Constructor:
- ASpell(std::string const& name, std::string const& effects);

Create abstract class ATarget:
- type (string)
- const std::string& getType() const;
- virtual ATarget* clone() const = 0;
- void getHitBySpell(const ASpell&);
// Output: <TYPE> has been <EFFECTS>!

In ASpell:
void launch(const ATarget&) const;
// Calls target.getHitBySpell(*this)

Create concrete class Fwoosh:
- name: "Fwoosh"
- effects: "fwooshed"
- implements clone() to return new Fwoosh

Create concrete class Dummy:
- type: "Target Practice Dummy"
- implements clone()

In Warlock, add:
- void learnSpell(ASpell*);
- void forgetSpell(const std::string&);
- void launchSpell(const std::string&, const ATarget&);

Use a suitable container (e.g., std::map) to store spells.

Example main:
int main() {
  Warlock richard("Richard", "the Titled");

  Dummy bob;
  Fwoosh* fwoosh = new Fwoosh();

  richard.learnSpell(fwoosh);

  richard.introduce();
  richard.launchSpell("Fwoosh", bob);

  richard.forgetSpell("Fwoosh");
  richard.launchSpell("Fwoosh", bob);
}

Expected output:
Richard: This looks like another boring day.
Richard: I am Richard, the Titled!
Target Practice Dummy has been fwooshed!
Richard: My job here is done!

