Assignment name: cpp_module_02
Expected files:
Warlock.cpp, Warlock.hpp
ASpell.hpp, ASpell.cpp
ATarget.hpp, ATarget.cpp
Fwoosh.hpp, Fwoosh.cpp
Dummy.hpp, Dummy.cpp
Fireball.hpp, Fireball.cpp
Polymorph.hpp, Polymorph.cpp
BrickWall.hpp, BrickWall.cpp
SpellBook.hpp, SpellBook.cpp
TargetGenerator.hpp, TargetGenerator.cpp

Note: switch is forbidden in Warlock, SpellBook, and TargetGenerator.

Create two new spells modeled after Fwoosh:
- Fireball: name = "Fireball", effects = "burnt to a crisp"
- Polymorph: name = "Polymorph", effects = "turned into a critter"

Create new concrete target:
- BrickWall: type = "Inconspicuous Red-brick Wall"

Create class SpellBook (canonical form, non-copyable):
- void learnSpell(ASpell*)      // copies spell
- void forgetSpell(const std::string&)
- ASpell* createSpell(const std::string&) // returns new copy

Modify Warlock:
- Owns a SpellBook
- Delegates learnSpell, forgetSpell to SpellBook
- Uses SpellBook in launchSpell to get the spell

Create TargetGenerator (canonical form, non-copyable):
- void learnTargetType(ATarget*)
- void forgetTargetType(const std::string&)
- ATarget* createTarget(const std::string&)

Example main:
int main() {
  Warlock richard("Richard", "foo");
  richard.setTitle("Hello, I'm Richard the Warlock!");
  BrickWall model1;

  Polymorph* polymorph = new Polymorph();
  TargetGenerator tarGen;

  tarGen.learnTargetType(&model1);
  richard.learnSpell(polymorph);

  Fireball* fireball = new Fireball();
  richard.learnSpell(fireball);

  ATarget* wall = tarGen.createTarget("Inconspicuous Red-brick Wall");

  richard.introduce();
  richard.launchSpell("Polymorph", *wall);
  richard.launchSpell("Fireball", *wall);
}

Expected output:
Richard: This looks like another boring day.
Richard: I am Richard, Hello, I'm Richard the Warlock!!
Inconspicuous Red-brick Wall has been turned into a critter!
Inconspicuous Red-brick Wall has been burnt to a crisp!
Richard: My job here is done!

